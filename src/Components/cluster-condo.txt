const initializeLayers = async () => {
    try {
        const [amphoeData, condoData] = await Promise.all([
            fetch('Amphoe-4326.geojson').then(res => res.json()),
            fetch('Condos-lastest.geojson').then(res => res.json())
        ]);

        setAmphoeFeatures(amphoeData.features);

        const mapInstance = map.current;

        mapInstance.addSource('Amphoe-bkk', {
            type: 'geojson',
            data: amphoeData
        });

        // Update the condo source to enable clustering
        mapInstance.addSource('bkk', {
            type: 'geojson',
            data: condoData,
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points
            clusterRadius: 50 // Radius of each cluster when clustering points
        });

        // Add Amphoe layers
        mapInstance.addLayer({
            id: 'Amphoe-borders',
            type: 'line',
            source: 'Amphoe-bkk',
            paint: {
                'line-color': '#cccccc',
                'line-width': 1,
                'line-opacity': 0.5
            }
        });

        mapInstance.addLayer({
            id: 'Amphoe-highlighted',
            type: 'fill',
            source: 'Amphoe-bkk',
            paint: {
                'fill-color': '#FF5722',
                'fill-opacity': 0.2
            },
            filter: ['==', ['get', 'AMP_NAME_T'], '']
        });

        mapInstance.addLayer({
            id: 'Amphoe-highlighted-border',
            type: 'line',
            source: 'Amphoe-bkk',
            paint: {
                'line-color': '#FF5722',
                'line-width': 3,
                'line-opacity': 0.8
            },
            filter: ['==', ['get', 'AMP_NAME_T'], '']
        });

        // Add clusters layer
        mapInstance.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'bkk',
            filter: ['has', 'point_count'],
            paint: {
                // Size of the cluster circle based on point count
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,  // radius 20px for point_count 0-9
                    10,  
                    25,  // radius 25px for point_count 10-49
                    50,  
                    30   // radius 30px for point_count >= 50
                ],
                // Color of the cluster circle based on point count
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#4CAF50',  // green for point_count 0-9
                    10,
                    '#2196F3',  // blue for point_count 10-49
                    50,
                    '#FF5722'   // orange for point_count >= 50
                ],
                'circle-stroke-width': 2,
                'circle-stroke-color': '#fff'
            }
        });

        // Add cluster count labels
        mapInstance.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'bkk',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            },
            paint: {
                'text-color': '#ffffff'
            }
        });

        // Add unclustered point layer
        mapInstance.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'bkk',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-radius': 6,
                'circle-color': '#FF5722',
                'circle-stroke-width': 2,
                'circle-stroke-color': '#fff'
            }
        });

        // Add click events for clusters
        mapInstance.on('click', 'clusters', (e) => {
            const features = mapInstance.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            const clusterId = features[0].properties.cluster_id;
            mapInstance.getSource('bkk').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                    if (err) return;

                    mapInstance.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });

        // Change cursor when hovering over clusters
        mapInstance.on('mouseenter', 'clusters', () => {
            mapInstance.getCanvas().style.cursor = 'pointer';
        });
        mapInstance.on('mouseleave', 'clusters', () => {
            mapInstance.getCanvas().style.cursor = '';
        });

        // Change cursor when hovering over unclustered points
        mapInstance.on('mouseenter', 'unclustered-point', () => {
            mapInstance.getCanvas().style.cursor = 'pointer';
        });
        mapInstance.on('mouseleave', 'unclustered-point', () => {
            mapInstance.getCanvas().style.cursor = '';
        });

        // Handle click on individual points
        mapInstance.on('click', 'unclustered-point', (e) => {
            const coordinates = e.features[0].geometry.coordinates.slice();
            zoomToCondo(coordinates);
        });

    } catch (err) {
        console.error('Failed to initialize map layers:', err);
    }
};

// main
const initializeLayers = async () => {
        try {
            const [amphoeData, condoData] = await Promise.all([
                fetch('Amphoe-4326.geojson').then(res => res.json()),
                fetch('Condos-lastest.geojson').then(res => res.json())
            ]);

            setAmphoeFeatures(amphoeData.features);

            const mapInstance = map.current;

            mapInstance.addSource('Amphoe-bkk', {
                type: 'geojson',
                data: amphoeData
            });

            mapInstance.addSource('bkk', {
                type: 'geojson',
                data: condoData
            });

            mapInstance.addLayer({
                id: 'Amphoe-borders',
                type: 'line',
                source: 'Amphoe-bkk',
                paint: {
                    'line-color': '#cccccc',
                    'line-width': 1,
                    'line-opacity': 0.5
                }
            });

            mapInstance.addLayer({
                id: 'Amphoe-highlighted',
                type: 'fill',
                source: 'Amphoe-bkk',
                paint: {
                    'fill-color': '#FF5722',
                    'fill-opacity': 0.2
                },
                filter: ['==', ['get', 'AMP_NAME_T'], '']
            });

            mapInstance.addLayer({
                id: 'Amphoe-highlighted-border',
                type: 'line',
                source: 'Amphoe-bkk',
                paint: {
                    'line-color': '#FF5722',
                    'line-width': 3,
                    'line-opacity': 0.8
                },
                filter: ['==', ['get', 'AMP_NAME_T'], '']
            });

            mapInstance.addLayer({
                id: 'bkk-points',
                type: 'circle',
                source: 'bkk',
                paint: {
                    'circle-radius': 6,
                    'circle-color': '#FF5722',
                    'circle-stroke-width': 2,
                    'circle-stroke-color': '#000'
                }
            });

            mapInstance.on('mouseenter', 'bkk-points', () => {
                mapInstance.getCanvas().style.cursor = 'pointer';
            });

            mapInstance.on('mouseleave', 'bkk-points', () => {
                mapInstance.getCanvas().style.cursor = '';
            });
        } catch (err) {
            console.error('Failed to initialize map layers:', err);
        }
    };